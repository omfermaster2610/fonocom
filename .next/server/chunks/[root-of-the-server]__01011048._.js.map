{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/app/api/usuario/actualizar/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { username, newUsername, newPassword } = await req.json()\r\n\r\n    if (!username || !newUsername || !newPassword) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Faltan datos' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    const filePath = path.join(process.cwd(), 'data', 'data.json')\r\n\r\n    if (!fs.existsSync(filePath)) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Archivo no encontrado' },\r\n        { status: 500 }\r\n      )\r\n    }\r\n\r\n    const rawData = fs.readFileSync(filePath, 'utf-8')\r\n    const users = JSON.parse(rawData)\r\n\r\n    // Verificar que sea un array\r\n    if (!Array.isArray(users)) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Formato invÃ¡lido de datos' },\r\n        { status: 500 }\r\n      )\r\n    }\r\n\r\n    // Buscar usuario por username\r\n    const userIndex = users.findIndex((u) => u.username === username)\r\n\r\n    if (userIndex === -1) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    // Actualizar datos\r\n    users[userIndex].username = newUsername\r\n    users[userIndex].password = newPassword\r\n\r\n    // Guardar cambios\r\n    fs.writeFileSync(filePath, JSON.stringify(users, null, 2), 'utf-8')\r\n\r\n    const updatedUser = { ...users[userIndex] }\r\n    delete updatedUser.password // Opcional: ocultar password al devolver\r\n\r\n    return NextResponse.json({ success: true, user: updatedUser })\r\n  } catch (error) {\r\n    console.error('ERROR AL ACTUALIZAR:', error)\r\n    return NextResponse.json(\r\n      { success: false, message: 'Error del servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,IAAI;QAE7D,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,aAAa;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAe,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;QAElD,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,WAAW;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAwB,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;QAC1C,MAAM,QAAQ,KAAK,KAAK,CAAC;QAEzB,6BAA6B;QAC7B,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA4B,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,8BAA8B;QAC9B,MAAM,YAAY,MAAM,SAAS,CAAC,CAAC,IAAM,EAAE,QAAQ,KAAK;QAExD,IAAI,cAAc,CAAC,GAAG;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAwB,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,mBAAmB;QACnB,KAAK,CAAC,UAAU,CAAC,QAAQ,GAAG;QAC5B,KAAK,CAAC,UAAU,CAAC,QAAQ,GAAG;QAE5B,kBAAkB;QAClB,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,UAAU,KAAK,SAAS,CAAC,OAAO,MAAM,IAAI;QAE3D,MAAM,cAAc;YAAE,GAAG,KAAK,CAAC,UAAU;QAAC;QAC1C,OAAO,YAAY,QAAQ,CAAC,yCAAyC;;QAErE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM;QAAY;IAC9D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAqB,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}