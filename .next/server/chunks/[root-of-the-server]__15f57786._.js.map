{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/db.ts"],"sourcesContent":["import dotenv from 'dotenv';\r\ndotenv.config(); // debe estar arriba, antes de usar process.env\r\n\r\nimport { Pool } from 'pg';\r\n\r\nconsole.log(\"DB_PASSWORD:\", process.env.DB_PASSWORD, typeof process.env.DB_PASSWORD);\r\n\r\nexport const db = new Pool({\r\n  host: process.env.DB_HOST,\r\n  port: Number(process.env.DB_PORT),\r\n  user: process.env.DB_USER,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_NAME,\r\n});\r\n\r\n"],"names":[],"mappings":";;;AAAA;AAGA;;;;;;AAFA,uIAAA,CAAA,UAAM,CAAC,MAAM,IAAI,+CAA+C;;AAIhE,QAAQ,GAAG,CAAC,gBAAgB,QAAQ,GAAG,CAAC,WAAW,EAAE,OAAO,QAAQ,GAAG,CAAC,WAAW;AAE5E,MAAM,KAAK,IAAI,oGAAA,CAAA,OAAI,CAAC;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,OAAO,QAAQ,GAAG,CAAC,OAAO;IAChC,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;AAC/B","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/usuarios/login.ts"],"sourcesContent":["import { obtenerUsuario } from './usuarioService';\r\n\r\nimport { db } from \"@/db\";\r\n\r\nexport async function validarLogin(username: string, password: string) {\r\n  try {\r\n    const res = await db.query(\r\n      \"SELECT id, username, password FROM usuarios WHERE username = $1\",\r\n      [username]\r\n    );\r\n\r\n    const usuario = res.rows[0];\r\n    if (!usuario) return null;\r\n\r\n    console.log(\"Usuario encontrado:\", usuario);\r\n    console.log(\"Password:\", password);\r\n\r\n    if (usuario.password === password) {\r\n      // Puedes devolver más info si es necesario\r\n      return {\r\n        id: usuario.id,\r\n        username: usuario.username,\r\n        // evita devolver la contraseña\r\n      };\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Error al validar login:\", error);\r\n    return null;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAEA;;;;;;AAEO,eAAe,aAAa,QAAgB,EAAE,QAAgB;IACnE,IAAI;QACF,MAAM,MAAM,MAAM,2GAAA,CAAA,KAAE,CAAC,KAAK,CACxB,mEACA;YAAC;SAAS;QAGZ,MAAM,UAAU,IAAI,IAAI,CAAC,EAAE;QAC3B,IAAI,CAAC,SAAS,OAAO;QAErB,QAAQ,GAAG,CAAC,uBAAuB;QACnC,QAAQ,GAAG,CAAC,aAAa;QAEzB,IAAI,QAAQ,QAAQ,KAAK,UAAU;YACjC,2CAA2C;YAC3C,OAAO;gBACL,IAAI,QAAQ,EAAE;gBACd,UAAU,QAAQ,QAAQ;YAE5B;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/app/api/login/route.js"],"sourcesContent":["// app/api/login/route.js\r\nimport { NextResponse } from \"next/server\";\r\nimport { validarLogin } from \"@/usuarios/login\"; // Asegúrate de que esta ruta es válida\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    // Obtener y parsear el cuerpo de la solicitud\r\n    const body = await request.json();\r\n    const { username, password } = body;\r\n\r\n    // Validación básica de datos\r\n    if (\r\n      typeof username !== \"string\" ||\r\n      typeof password !== \"string\" ||\r\n      !username.trim() ||\r\n      !password.trim()\r\n    ) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Credenciales inválidas\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Log para depuración (puedes eliminarlo en producción)\r\n    console.log(\"Intento de login con:\", { username, password });\r\n\r\n    // Verificación con la base de datos\r\n    const usuario = await validarLogin(username.trim(), password.trim());\r\n\r\n    // Si no se encuentra usuario válido\r\n    if (!usuario) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Credenciales incorrectas\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Eliminar contraseña del objeto antes de enviarlo al frontend\r\n    const { password: _, ...usuarioSinPassword } = usuario;\r\n\r\n    // Respuesta exitosa\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: usuarioSinPassword,\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"Error en login:\", error);\r\n    return NextResponse.json(\r\n      { success: false, message: \"Error del servidor\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;AACzB;AACA,sNAAiD,uCAAuC;;;;;;;AAEjF,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,8CAA8C;QAC9C,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,6BAA6B;QAC7B,IACE,OAAO,aAAa,YACpB,OAAO,aAAa,YACpB,CAAC,SAAS,IAAI,MACd,CAAC,SAAS,IAAI,IACd;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAyB,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,wDAAwD;QACxD,QAAQ,GAAG,CAAC,yBAAyB;YAAE;YAAU;QAAS;QAE1D,oCAAoC;QACpC,MAAM,UAAU,MAAM,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,EAAE,SAAS,IAAI,IAAI,SAAS,IAAI;QAEjE,oCAAoC;QACpC,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA2B,GACtD;gBAAE,QAAQ;YAAI;QAElB;QAEA,+DAA+D;QAC/D,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,oBAAoB,GAAG;QAE/C,oBAAoB;QACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAqB,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}