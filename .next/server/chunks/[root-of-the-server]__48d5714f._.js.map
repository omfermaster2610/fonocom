{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/OneDrive/Escritorio/fonocom/src/app/api/login/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport fs from \"fs\"\r\nimport path from \"path\"\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const { username, password } = await request.json()\r\n    console.log(\"Recibido:\", username, password)\r\n\r\n    if (!username || !password) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Faltan credenciales\" },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    const filePath = path.join(process.cwd(), \"data\", \"data.json\")\r\n    if (!fs.existsSync(filePath)) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Archivo no encontrado\" },\r\n        { status: 500 }\r\n      )\r\n    }\r\n\r\n    const rawData = fs.readFileSync(filePath, \"utf-8\")\r\n    const users = JSON.parse(rawData)\r\n\r\n    // Buscar usuario vÃ¡lido\r\n    const user = users.find(\r\n      (u) => u.username === username && u.password === password\r\n    )\r\n\r\n    if (user) {\r\n      const { password, ...userWithoutPassword } = user\r\n      console.log(\"Login exitoso:\", userWithoutPassword)\r\n      return NextResponse.json({ success: true, user: userWithoutPassword })\r\n    } else {\r\n      console.log(\"Credenciales incorrectas\")\r\n      return NextResponse.json(\r\n        { success: false, message: \"Credenciales incorrectas\" },\r\n        { status: 401 }\r\n      )\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"Error en login:\", error)\r\n    return NextResponse.json(\r\n      { success: false, message: \"Error del servidor\" },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QACjD,QAAQ,GAAG,CAAC,aAAa,UAAU;QAEnC,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAsB,GACjD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;QAClD,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,WAAW;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAwB,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;QAC1C,MAAM,QAAQ,KAAK,KAAK,CAAC;QAEzB,wBAAwB;QACxB,MAAM,OAAO,MAAM,IAAI,CACrB,CAAC,IAAM,EAAE,QAAQ,KAAK,YAAY,EAAE,QAAQ,KAAK;QAGnD,IAAI,MAAM;YACR,MAAM,EAAE,QAAQ,EAAE,GAAG,qBAAqB,GAAG;YAC7C,QAAQ,GAAG,CAAC,kBAAkB;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAM,MAAM;YAAoB;QACtE,OAAO;YACL,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA2B,GACtD;gBAAE,QAAQ;YAAI;QAElB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAqB,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}