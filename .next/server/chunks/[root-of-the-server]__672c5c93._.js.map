{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/app/api/usuario/actualizar/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport { Pool } from 'pg'\r\n\r\n// Configura tu conexión a PostgreSQL\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL, // asegúrate de tener esta variable en .env\r\n  ssl: {\r\n    rejectUnauthorized: false,\r\n  },\r\n})\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json()\r\n    const { username, password } = body\r\n\r\n    // Verificar que los campos obligatorios existen\r\n    if (!username || !password) {\r\n      return NextResponse.json({ error: 'Faltan datos' }, { status: 400 })\r\n    }\r\n\r\n    // Actualizar el usuario\r\n    const result = await pool.query(\r\n      `UPDATE usuario SET password = $1 WHERE username = $2 RETURNING id, username`,\r\n      [password, username]\r\n    )\r\n\r\n    if (result.rowCount === 0) {\r\n      return NextResponse.json({ error: 'Usuario no encontrado' }, { status: 404 })\r\n    }\r\n\r\n    const user = result.rows[0]\r\n\r\n    // También traemos los datos de progreso\r\n    const progresoResult = await pool.query(\r\n      `SELECT comunicacion, empleo, ideas FROM progreso WHERE idusuario = $1`,\r\n      [user.id]\r\n    )\r\n\r\n    const progreso = progresoResult.rows[0] || {\r\n      comunicacion: 0,\r\n      empleo: 0,\r\n      ideas: 0,\r\n    }\r\n\r\n    return NextResponse.json({\r\n      user: {\r\n        username: user.username,\r\n        password: '', // por seguridad\r\n        progreso,\r\n      },\r\n    })\r\n  } catch (error) {\r\n    console.error('Error actualizando usuario:', error)\r\n    return NextResponse.json({ error: 'Error en el servidor' }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;AAEA,qCAAqC;AACrC,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,gDAAgD;QAChD,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,wBAAwB;QACxB,MAAM,SAAS,MAAM,KAAK,KAAK,CAC7B,CAAC,2EAA2E,CAAC,EAC7E;YAAC;YAAU;SAAS;QAGtB,IAAI,OAAO,QAAQ,KAAK,GAAG;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,MAAM,OAAO,OAAO,IAAI,CAAC,EAAE;QAE3B,wCAAwC;QACxC,MAAM,iBAAiB,MAAM,KAAK,KAAK,CACrC,CAAC,qEAAqE,CAAC,EACvE;YAAC,KAAK,EAAE;SAAC;QAGX,MAAM,WAAW,eAAe,IAAI,CAAC,EAAE,IAAI;YACzC,cAAc;YACd,QAAQ;YACR,OAAO;QACT;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;gBACJ,UAAU,KAAK,QAAQ;gBACvB,UAAU;gBACV;YACF;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}