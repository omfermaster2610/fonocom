{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/OneDrive/Escritorio/fonocom/src/app/api/usuario/registro/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { username, password } = await req.json()\r\n\r\n    if (!username || !password) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Faltan campos' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    const filePath = path.join(process.cwd(), 'data', 'data.json')\r\n    const rawData = fs.existsSync(filePath)\r\n      ? fs.readFileSync(filePath, 'utf-8')\r\n      : '[]'\r\n\r\n    const users = JSON.parse(rawData)\r\n\r\n    if (!Array.isArray(users)) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Datos corruptos' },\r\n        { status: 500 }\r\n      )\r\n    }\r\n\r\n    const exists = users.some((u) => u.username === username)\r\n    if (exists) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Usuario ya existe' },\r\n        { status: 409 }\r\n      )\r\n    }\r\n\r\n    const newUser = {\r\n      username,\r\n      password,\r\n      progreso: {\r\n        comunicacion: 0,\r\n        empleo: 0,\r\n        ideas: 0,\r\n      },\r\n    }\r\n\r\n    users.push(newUser)\r\n    fs.writeFileSync(filePath, JSON.stringify(users, null, 2), 'utf-8')\r\n\r\n    const userResponse = { ...newUser }\r\n    delete userResponse.password // Opcional\r\n\r\n    return NextResponse.json({ success: true, user: userResponse })\r\n  } catch (error) {\r\n    console.error('ERROR REGISTRO:', error)\r\n    return NextResponse.json(\r\n      { success: false, message: 'Error del servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE7C,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAgB,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;QAClD,MAAM,UAAU,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,YAC1B,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU,WAC1B;QAEJ,MAAM,QAAQ,KAAK,KAAK,CAAC;QAEzB,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAkB,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,IAAI,CAAC,CAAC,IAAM,EAAE,QAAQ,KAAK;QAChD,IAAI,QAAQ;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAoB,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU;YACd;YACA;YACA,UAAU;gBACR,cAAc;gBACd,QAAQ;gBACR,OAAO;YACT;QACF;QAEA,MAAM,IAAI,CAAC;QACX,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,UAAU,KAAK,SAAS,CAAC,OAAO,MAAM,IAAI;QAE3D,MAAM,eAAe;YAAE,GAAG,OAAO;QAAC;QAClC,OAAO,aAAa,QAAQ,CAAC,WAAW;;QAExC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM;QAAa;IAC/D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAqB,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}