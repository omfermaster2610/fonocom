{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/lib/db.ts"],"sourcesContent":["import { Pool } from 'pg';\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nexport const db = new Pool({\r\n  host: process.env.DB_HOST,\r\n  port: Number(process.env.DB_PORT) || 5432,\r\n  user: process.env.DB_USER,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_NAME,\r\n  ssl: false,\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;AACA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAEN,MAAM,KAAK,IAAI,oGAAA,CAAA,OAAI,CAAC;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,OAAO,QAAQ,GAAG,CAAC,OAAO,KAAK;IACrC,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,KAAK;AACP","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/usuarios/usuarioService.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { db } from '../lib/db';\r\nimport type { Usuario, Progreso } from './usuario';\r\n\r\nexport interface usuario {\r\n  username: string\r\n  password: string\r\n  progreso: {\r\n    comunicacion: number\r\n    empleo: number\r\n    ideas: number\r\n  }\r\n}\r\n\r\nexport async function obtenerUsuario(username: string): Promise<Usuario | null> {\r\n  const resUsuario = await db.query('SELECT * FROM usuarios WHERE username = $1', [username]);\r\n  if (resUsuario.rows.length === 0) return null;\r\n\r\n  const usuario = resUsuario.rows[0] as Usuario;\r\n\r\n  // Obtener progreso separado\r\n  const resProgreso = await db.query(\r\n    'SELECT comunicacion, empleo, ideas FROM progreso WHERE usuarioid = $1',\r\n    [usuario.id]\r\n  );\r\n\r\n  const progreso = (resProgreso.rows[0] as Progreso) || {\r\n    comunicacion: 0,\r\n    empleo: 0,\r\n    ideas: 0,\r\n  };\r\n\r\n  return { ...usuario, progreso };\r\n}\r\n\r\n\r\nexport async function guardarUsuario(usuario: Usuario): Promise<void> {\r\n  // Insertar o actualizar el usuario usando ON CONFLICT\r\n  const res = await db.query(\r\n    `INSERT INTO usuarios (username, password)\r\n     VALUES ($1, $2)\r\n     ON CONFLICT (username) DO UPDATE SET password = EXCLUDED.password\r\n     RETURNING id`,\r\n    [usuario.username, usuario.password]\r\n  );\r\n\r\n  const usuarioid = res.rows[0].id;\r\n\r\n  // Insertar o actualizar progreso usando ON CONFLICT\r\n  await db.query(\r\n    `INSERT INTO progreso (usuarioid, comunicacion, empleo, ideas)\r\n     VALUES ($1, $2, $3, $4)\r\n     ON CONFLICT (usuarioid) DO UPDATE SET\r\n       comunicacion = EXCLUDED.comunicacion,\r\n       empleo = EXCLUDED.empleo,\r\n       ideas = EXCLUDED.ideas`,\r\n    [\r\n      usuarioid,\r\n      usuario.progreso.comunicacion,\r\n      usuario.progreso.empleo,\r\n      usuario.progreso.ideas,\r\n    ]\r\n  );\r\n}\r\n\r\n\r\nexport async function obtenerProgreso(usuarioid: number): Promise<Progreso> {\r\n  const res = await db.query(\r\n    'SELECT comunicacion, empleo, ideas FROM progreso WHERE usuarioid = $1',\r\n    [usuarioid]\r\n  );\r\n  return (res.rows[0] as Progreso) || {\r\n    comunicacion: 0,\r\n    empleo: 0,\r\n    ideas: 0,\r\n  };\r\n}\r\n\r\n\r\nexport async function actualizarProgreso(usuarioid: number, nuevoProgreso: Progreso): Promise<void> {\r\n  await db.query(\r\n    `UPDATE progreso SET comunicacion = $1, empleo = $2, ideas = $3 WHERE usuarioid = $4`,\r\n    [\r\n      nuevoProgreso.comunicacion,\r\n      nuevoProgreso.empleo,\r\n      nuevoProgreso.ideas,\r\n      usuarioid,\r\n    ]\r\n  );\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;;AACrD;;;;;;AAaO,eAAe,eAAe,QAAgB;IACnD,MAAM,aAAa,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CAAC,8CAA8C;QAAC;KAAS;IAC1F,IAAI,WAAW,IAAI,CAAC,MAAM,KAAK,GAAG,OAAO;IAEzC,MAAM,UAAU,WAAW,IAAI,CAAC,EAAE;IAElC,4BAA4B;IAC5B,MAAM,cAAc,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CAChC,yEACA;QAAC,QAAQ,EAAE;KAAC;IAGd,MAAM,WAAW,AAAC,YAAY,IAAI,CAAC,EAAE,IAAiB;QACpD,cAAc;QACd,QAAQ;QACR,OAAO;IACT;IAEA,OAAO;QAAE,GAAG,OAAO;QAAE;IAAS;AAChC;AAGO,eAAe,eAAe,OAAgB;IACnD,sDAAsD;IACtD,MAAM,MAAM,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACxB,CAAC;;;iBAGY,CAAC,EACd;QAAC,QAAQ,QAAQ;QAAE,QAAQ,QAAQ;KAAC;IAGtC,MAAM,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE;IAEhC,oDAAoD;IACpD,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACZ,CAAC;;;;;6BAKwB,CAAC,EAC1B;QACE;QACA,QAAQ,QAAQ,CAAC,YAAY;QAC7B,QAAQ,QAAQ,CAAC,MAAM;QACvB,QAAQ,QAAQ,CAAC,KAAK;KACvB;AAEL;AAGO,eAAe,gBAAgB,SAAiB;IACrD,MAAM,MAAM,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACxB,yEACA;QAAC;KAAU;IAEb,OAAO,AAAC,IAAI,IAAI,CAAC,EAAE,IAAiB;QAClC,cAAc;QACd,QAAQ;QACR,OAAO;IACT;AACF;AAGO,eAAe,mBAAmB,SAAiB,EAAE,aAAuB;IACjF,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACZ,CAAC,mFAAmF,CAAC,EACrF;QACE,cAAc,YAAY;QAC1B,cAAc,MAAM;QACpB,cAAc,KAAK;QACnB;KACD;AAEL","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/usuarios/login.ts"],"sourcesContent":["import { obtenerUsuario } from './usuarioService';\r\n\r\nexport async function validarLogin(username: string, password: string) {\r\n  const usuario = await obtenerUsuario(username);\r\n  if (!usuario) return null;\r\n\r\n  if (usuario.password === password) {\r\n    return usuario;\r\n  }\r\n\r\n  return null;\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;;;;;AAEO,eAAe,aAAa,QAAgB,EAAE,QAAgB;IACnE,MAAM,UAAU,MAAM,CAAA,GAAA,mIAAA,CAAA,iBAAc,AAAD,EAAE;IACrC,IAAI,CAAC,SAAS,OAAO;IAErB,IAAI,QAAQ,QAAQ,KAAK,UAAU;QACjC,OAAO;IACT;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/app/api/login/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { validarLogin } from \"@/usuarios/login\";\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const { username, password } = await request.json();\r\n\r\n    if (\r\n      typeof username !== 'string' ||\r\n      typeof password !== 'string' ||\r\n      !username.trim() ||\r\n      !password.trim()\r\n    ) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Credenciales inv√°lidas\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log('Tipo de username:', typeof username, 'Valor:', username);\r\n    console.log('Tipo de password:', typeof password, 'Valor:', password);\r\n\r\n    const usuario = await validarLogin(username, password);\r\n\r\n    if (!usuario) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"Credenciales incorrectas\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const { password: _, ...usuarioSinPassword } = usuario;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: usuarioSinPassword,\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"Error en login:\", error);\r\n    return NextResponse.json(\r\n      { success: false, message: \"Error del servidor\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEjD,IACE,OAAO,aAAa,YACpB,OAAO,aAAa,YACpB,CAAC,SAAS,IAAI,MACd,CAAC,SAAS,IAAI,IACd;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAyB,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,qBAAqB,OAAO,UAAU,UAAU;QAC5D,QAAQ,GAAG,CAAC,qBAAqB,OAAO,UAAU,UAAU;QAE5D,MAAM,UAAU,MAAM,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,EAAE,UAAU;QAE7C,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA2B,GACtD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,oBAAoB,GAAG;QAE/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAqB,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}