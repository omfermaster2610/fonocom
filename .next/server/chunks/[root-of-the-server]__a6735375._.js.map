{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/lib/db.ts"],"sourcesContent":["import dotenv from 'dotenv';\r\ndotenv.config(); // Siempre primero\r\n\r\nimport { Pool } from 'pg';\r\n\r\nconsole.log(\"üü° Verificando conexi√≥n a la base de datos...\");\r\nconsole.log(\"DATABASE_URL:\", process.env.DATABASE_URL || \"‚ùå No definida\");\r\n\r\n// Crear el pool usando connectionString\r\nexport const db = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n  ssl: {\r\n    rejectUnauthorized: false, // Requerido por proveedores como Render\r\n  },\r\n});\r\n\r\n// Probar la conexi√≥n inmediatamente\r\ndb.connect()\r\n  .then((client) => {\r\n    console.log(\"‚úÖ Conectado a la base de datos correctamente.\");\r\n\r\n    return client\r\n      .query('SELECT NOW()')\r\n      .then((res) => {\r\n        console.log(\"üìÖ Hora actual en DB:\", res.rows[0].now);\r\n        client.release();\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"‚ùå Error ejecutando query de prueba:\", err);\r\n        client.release();\r\n      });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"‚ùå No se pudo conectar al pool de la base de datos:\", err);\r\n  });\r\n"],"names":[],"mappings":";;;AAAA;AAGA;;;;;;AAFA,uIAAA,CAAA,UAAM,CAAC,MAAM,IAAI,kBAAkB;;AAInC,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC,iBAAiB,QAAQ,GAAG,CAAC,YAAY,IAAI;AAGlD,MAAM,KAAK,IAAI,oGAAA,CAAA,OAAI,CAAC;IACzB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEA,oCAAoC;AACpC,GAAG,OAAO,GACP,IAAI,CAAC,CAAC;IACL,QAAQ,GAAG,CAAC;IAEZ,OAAO,OACJ,KAAK,CAAC,gBACN,IAAI,CAAC,CAAC;QACL,QAAQ,GAAG,CAAC,yBAAyB,IAAI,IAAI,CAAC,EAAE,CAAC,GAAG;QACpD,OAAO,OAAO;IAChB,GACC,KAAK,CAAC,CAAC;QACN,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO,OAAO;IAChB;AACJ,GACC,KAAK,CAAC,CAAC;IACN,QAAQ,KAAK,CAAC,sDAAsD;AACtE","debugId":null}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/usuarios/usuarioService.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { db } from '../lib/db';\r\nimport type { Usuario, Progreso } from './usuario';\r\n\r\nexport interface usuario {\r\n  username: string\r\n  password: string\r\n  progreso: {\r\n    comunicacion: number\r\n    empleo: number\r\n    ideas: number\r\n  }\r\n}\r\n\r\nexport async function obtenerUsuario(username: string): Promise<Usuario | null> {\r\n  const resUsuario = await db.query('SELECT * FROM usuarios WHERE username = $1', [username]);\r\n  if (resUsuario.rows.length === 0) return null;\r\n\r\n  const usuario = resUsuario.rows[0] as Usuario;\r\n\r\n  // Obtener progreso separado\r\n  const resProgreso = await db.query(\r\n    'SELECT comunicacion, empleo, ideas FROM progreso WHERE usuarioid = $1',\r\n    [usuario.id]\r\n  );\r\n\r\n  const progreso = (resProgreso.rows[0] as Progreso) || {\r\n    comunicacion: 0,\r\n    empleo: 0,\r\n    ideas: 0,\r\n  };\r\n\r\n  return { ...usuario, progreso };\r\n}\r\n\r\n\r\nexport async function guardarUsuario(usuario: Usuario): Promise<void> {\r\n  const res = await db.query(\r\n    `INSERT INTO usuarios (username, password)\r\n     VALUES ($1, $2)\r\n     ON CONFLICT (username) DO UPDATE SET password = EXCLUDED.password\r\n     RETURNING id`,\r\n    [usuario.username, usuario.password]\r\n  );\r\n\r\n  const usuarioid = res.rows[0].id;\r\n\r\n  // Insertar o actualizar progreso usando ON CONFLICT\r\n  await db.query(\r\n    `INSERT INTO progreso (usuarioid, comunicacion, empleo, ideas)\r\n     VALUES ($1, $2, $3, $4)\r\n     ON CONFLICT (usuarioid) DO UPDATE SET\r\n       comunicacion = EXCLUDED.comunicacion,\r\n       empleo = EXCLUDED.empleo,\r\n       ideas = EXCLUDED.ideas`,\r\n    [\r\n      usuarioid,\r\n      usuario.progreso.comunicacion,\r\n      usuario.progreso.empleo,\r\n      usuario.progreso.ideas,\r\n    ]\r\n  );\r\n}\r\n\r\nexport async function registrarUsuario({ username, password }: { username: string, password: string }) {\r\n  const res = await db.query(\r\n    `INSERT INTO usuarios (username, password) VALUES ($1, $2) RETURNING id, username`,\r\n    [username, password]\r\n  )\r\n\r\n  const nuevoUsuario = res.rows[0]\r\n\r\n  await db.query(\r\n    `INSERT INTO progreso (usuarioid, comunicacion, empleo, ideas) VALUES ($1, 0, 0, 0)`,\r\n    [nuevoUsuario.id]\r\n  )\r\n\r\n  return nuevoUsuario\r\n}\r\n\r\n\r\nexport async function obtenerProgreso(usuarioid: number): Promise<Progreso> {\r\n  const res = await db.query(\r\n    'SELECT comunicacion, empleo, ideas FROM progreso WHERE usuarioid = $1',\r\n    [usuarioid]\r\n  );\r\n  return (res.rows[0] as Progreso) || {\r\n    comunicacion: 0,\r\n    empleo: 0,\r\n    ideas: 0,\r\n  };\r\n}\r\n\r\n\r\nexport async function actualizarProgreso(usuarioid: number, nuevoProgreso: Progreso): Promise<void> {\r\n  await db.query(\r\n    `UPDATE progreso SET comunicacion = $1, empleo = $2, ideas = $3 WHERE usuarioid = $4`,\r\n    [\r\n      nuevoProgreso.comunicacion,\r\n      nuevoProgreso.empleo,\r\n      nuevoProgreso.ideas,\r\n      usuarioid,\r\n    ]\r\n  );\r\n}\r\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;;;AACrD;;;;;;AAaO,eAAe,eAAe,QAAgB;IACnD,MAAM,aAAa,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CAAC,8CAA8C;QAAC;KAAS;IAC1F,IAAI,WAAW,IAAI,CAAC,MAAM,KAAK,GAAG,OAAO;IAEzC,MAAM,UAAU,WAAW,IAAI,CAAC,EAAE;IAElC,4BAA4B;IAC5B,MAAM,cAAc,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CAChC,yEACA;QAAC,QAAQ,EAAE;KAAC;IAGd,MAAM,WAAW,AAAC,YAAY,IAAI,CAAC,EAAE,IAAiB;QACpD,cAAc;QACd,QAAQ;QACR,OAAO;IACT;IAEA,OAAO;QAAE,GAAG,OAAO;QAAE;IAAS;AAChC;AAGO,eAAe,eAAe,OAAgB;IACnD,MAAM,MAAM,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACxB,CAAC;;;iBAGY,CAAC,EACd;QAAC,QAAQ,QAAQ;QAAE,QAAQ,QAAQ;KAAC;IAGtC,MAAM,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE;IAEhC,oDAAoD;IACpD,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACZ,CAAC;;;;;6BAKwB,CAAC,EAC1B;QACE;QACA,QAAQ,QAAQ,CAAC,YAAY;QAC7B,QAAQ,QAAQ,CAAC,MAAM;QACvB,QAAQ,QAAQ,CAAC,KAAK;KACvB;AAEL;AAEO,eAAe,iBAAiB,EAAE,QAAQ,EAAE,QAAQ,EAA0C;IACnG,MAAM,MAAM,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACxB,CAAC,gFAAgF,CAAC,EAClF;QAAC;QAAU;KAAS;IAGtB,MAAM,eAAe,IAAI,IAAI,CAAC,EAAE;IAEhC,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACZ,CAAC,kFAAkF,CAAC,EACpF;QAAC,aAAa,EAAE;KAAC;IAGnB,OAAO;AACT;AAGO,eAAe,gBAAgB,SAAiB;IACrD,MAAM,MAAM,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACxB,yEACA;QAAC;KAAU;IAEb,OAAO,AAAC,IAAI,IAAI,CAAC,EAAE,IAAiB;QAClC,cAAc;QACd,QAAQ;QACR,OAAO;IACT;AACF;AAGO,eAAe,mBAAmB,SAAiB,EAAE,aAAuB;IACjF,MAAM,kHAAA,CAAA,KAAE,CAAC,KAAK,CACZ,CAAC,mFAAmF,CAAC,EACrF;QACE,cAAc,YAAY;QAC1B,cAAc,MAAM;QACpB,cAAc,KAAK;QACnB;KACD;AAEL","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omars/Documents/OMAR/prototipo/fonocom/src/app/api/progreso/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from \"next/server\";\r\nimport { obtenerUsuario, actualizarProgreso, obtenerProgreso } from \"@/usuarios/usuarioService\";\r\nimport type { Progreso } from \"@/usuarios/usuario\";\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const username = searchParams.get(\"username\");\r\n\r\n    if (!username) {\r\n      return NextResponse.json({ error: \"Username is required\" }, { status: 400 });\r\n    }\r\n\r\n    const usuario = await obtenerUsuario(username);\r\n\r\n    if (!usuario) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n    \r\n    const progreso: Progreso = await obtenerProgreso(usuario.id);\r\n\r\n    return NextResponse.json({\r\n      username: usuario.username,\r\n      progreso,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in GET:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { username, modulo, incremento } = body;\r\n\r\n    if (!username || !modulo || incremento === undefined) {\r\n      return NextResponse.json(\r\n        { error: \"Username, modulo, and incremento are required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const modulosValidos = ['comunicacion', 'empleo', 'ideas'] as const;\r\n    type Modulo = typeof modulosValidos[number];\r\n\r\n    if (!modulosValidos.includes(modulo)) {\r\n      return NextResponse.json({ error: \"M√≥dulo inv√°lido\" }, { status: 400 });\r\n    }\r\n\r\n    const usuario = await obtenerUsuario(username);\r\n    if (!usuario) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Obtener progreso actual desde la tabla progreso\r\n    const progresoActual: Progreso = await obtenerProgreso(usuario.id);\r\n\r\n    const progresoModuloActual = progresoActual[modulo as Modulo] || 0;\r\n    const nuevoProgreso = Math.min(progresoModuloActual + incremento, 100);\r\n    progresoActual[modulo as Modulo] = nuevoProgreso;\r\n\r\n    await actualizarProgreso(usuario.id, progresoActual);\r\n\r\n    return NextResponse.json({\r\n      username,\r\n      modulo,\r\n      progresoAnterior: progresoModuloActual,\r\n      progresoNuevo: nuevoProgreso,\r\n      completado: nuevoProgreso >= 1,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in POST:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,WAAW,aAAa,GAAG,CAAC;QAElC,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,MAAM,UAAU,MAAM,CAAA,GAAA,mIAAA,CAAA,iBAAc,AAAD,EAAE;QAErC,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,WAAqB,MAAM,CAAA,GAAA,mIAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ,EAAE;QAE3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,UAAU,QAAQ,QAAQ;YAC1B;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG;QAEzC,IAAI,CAAC,YAAY,CAAC,UAAU,eAAe,WAAW;YACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgD,GACzD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB;YAAC;YAAgB;YAAU;SAAQ;QAG1D,IAAI,CAAC,eAAe,QAAQ,CAAC,SAAS;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,MAAM,UAAU,MAAM,CAAA,GAAA,mIAAA,CAAA,iBAAc,AAAD,EAAE;QACrC,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,kDAAkD;QAClD,MAAM,iBAA2B,MAAM,CAAA,GAAA,mIAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ,EAAE;QAEjE,MAAM,uBAAuB,cAAc,CAAC,OAAiB,IAAI;QACjE,MAAM,gBAAgB,KAAK,GAAG,CAAC,uBAAuB,YAAY;QAClE,cAAc,CAAC,OAAiB,GAAG;QAEnC,MAAM,CAAA,GAAA,mIAAA,CAAA,qBAAkB,AAAD,EAAE,QAAQ,EAAE,EAAE;QAErC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA,kBAAkB;YAClB,eAAe;YACf,YAAY,iBAAiB;QAC/B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}